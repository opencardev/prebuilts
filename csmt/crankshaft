#!/bin/bash

version=0.9.5

source /opt/crankshaft/crankshaft_default_env.sh
source /opt/crankshaft/crankshaft_system_env.sh
source /boot/crankshaft/crankshaft_env.sh

CS_BRIGHTNESS_STORE_FILE=/boot/crankshaft/brightness
CS_BRIGHTNESS_NIGHT_STORE_FILE=/boot/crankshaft/brightness-night
CS_VOLUME_STORE_FILE=/boot/crankshaft/volume

# FS functions default mode - ignored on dev mode
function cs_bootrw () {
    if [ ! -f /tmp/dev_mode_enabled ] ; then
	sudo mount -o remount,rw /boot
    fi
}
function cs_bootro() {
    if [ ! -f /tmp/dev_mode_enabled ] ; then
	sudo mount -o remount,ro /boot
    fi
}
function cs_systemrw() {
    if [ ! -f /tmp/dev_mode_enabled ] ; then
	sudo mount -o remount,rw /
    else
	sudo mount -o remount,rw /
    fi
}
function cs_systemro() {
    if [ ! -f /tmp/dev_mode_enabled ] ; then
	sudo mount -o remount,ro /
    fi
}

# Audio functions
function cs_audio_rpi() {
    sudo sed -i 's/^dtparam=audio=.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=hifiberry.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=audioinjector.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=allo.*//' /boot/config.txt
    sudo sed -i 's/^# Enable audio (loads snd_bcm2835).*//' /boot/config.txt
    sudo sed -i 's/^# Audio Setup.*//' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# Audio Setup' >> /boot/config.txt"
    sudo sh -c "echo 'dtparam=audio=on' >> /boot/config.txt"
    sudo sh -c "rm -f /boot/crankshaft/alsactl.state"
}

function cs_audio_hifiberry() {
    sudo sed -i 's/^dtparam=audio=.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=hifiberry.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=audioinjector.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=allo.*//' /boot/config.txt
    sudo sed -i 's/^# Enable audio (loads snd_bcm2835).*//' /boot/config.txt
    sudo sed -i 's/^# Audio Setup.*//' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# Audio Setup' >> /boot/config.txt"
    sudo sh -c "echo 'dtoverlay=hifiberry-'$1 >> /boot/config.txt"
    sudo sh -c "rm -f /boot/crankshaft/alsactl.state"
}

function cs_audio_audioinjector() {
    sudo sed -i 's/^dtparam=audio=.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=hifiberry.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=audioinjector.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=allo.*//' /boot/config.txt
    sudo sed -i 's/^# Enable audio (loads snd_bcm2835).*//' /boot/config.txt
    sudo sed -i 's/^# Audio Setup.*//' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# Audio Setup' >> /boot/config.txt"
    sudo sh -c "echo 'dtoverlay=audioinjector-'$1 >> /boot/config.txt"
    sudo sh -c "rm -f /boot/crankshaft/alsactl.state"
}
function cs_audio_audioinjector_controls() {
    TEMPSTATE="/tmp/alsa.dummy"
    echo "state.audioinjectorpi {" > $TEMPSTATE
    echo "	control.1 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Master Playback Volume'" >> $TEMPSTATE
    echo "		value.0 121" >> $TEMPSTATE
    echo "		value.1 121" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type INTEGER" >> $TEMPSTATE
    echo "			count 2" >> $TEMPSTATE
    echo "			range '0 - 127'" >> $TEMPSTATE
    echo "			dbmin -9999999" >> $TEMPSTATE
    echo "			dbmax 600" >> $TEMPSTATE
    echo "			dbvalue.0 0" >> $TEMPSTATE
    echo "			dbvalue.1 0" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.2 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Master Playback ZC Switch'" >> $TEMPSTATE
    echo "		value.0 false" >> $TEMPSTATE
    echo "		value.1 false" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 2" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.3 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Capture Volume'" >> $TEMPSTATE
    echo "		value.0 31" >> $TEMPSTATE
    echo "		value.1 31" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type INTEGER" >> $TEMPSTATE
    echo "			count 2" >> $TEMPSTATE
    echo "			range '0 - 31'" >> $TEMPSTATE
    echo "			dbmin -3450" >> $TEMPSTATE
    echo "			dbmax 1200" >> $TEMPSTATE
    echo "			dbvalue.0 1200" >> $TEMPSTATE
    echo "			dbvalue.1 1200" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.4 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Line Capture Switch'" >> $TEMPSTATE
    echo "		value.0 false" >> $TEMPSTATE
    echo "		value.1 false" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 2" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.5 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Mic Boost Volume'" >> $TEMPSTATE
    echo "		value 1" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type INTEGER" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "			range '0 - 1'" >> $TEMPSTATE
    echo "			dbmin 0" >> $TEMPSTATE
    echo "			dbmax 2000" >> $TEMPSTATE
    echo "			dbvalue.0 2000" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.6 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Mic Capture Switch'" >> $TEMPSTATE
    echo "		value true" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.7 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Sidetone Playback Volume'" >> $TEMPSTATE
    echo "		value 0" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type INTEGER" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "			range '0 - 3'" >> $TEMPSTATE
    echo "			dbmin -1500" >> $TEMPSTATE
    echo "			dbmax -600" >> $TEMPSTATE
    echo "			dbvalue.0 -1500" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.8 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'ADC High Pass Filter Switch'" >> $TEMPSTATE
    echo "		value true" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.9 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Store DC Offset Switch'" >> $TEMPSTATE
    echo "		value false" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.10 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Playback Deemphasis Switch'" >> $TEMPSTATE
    echo "		value false" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.11 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Output Mixer Line Bypass Switch'" >> $TEMPSTATE
    echo "		value false" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.12 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Output Mixer Mic Sidetone Switch'" >> $TEMPSTATE
    echo "		value false" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.13 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Output Mixer HiFi Playback Switch'" >> $TEMPSTATE
    echo "		value true" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type BOOLEAN" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "	control.14 {" >> $TEMPSTATE
    echo "		iface MIXER" >> $TEMPSTATE
    echo "		name 'Input Mux'" >> $TEMPSTATE
    echo "		value Mic" >> $TEMPSTATE
    echo "		comment {" >> $TEMPSTATE
    echo "			access 'read write'" >> $TEMPSTATE
    echo "			type ENUMERATED" >> $TEMPSTATE
    echo "			count 1" >> $TEMPSTATE
    echo "			item.0 'Line In'" >> $TEMPSTATE
    echo "			item.1 Mic" >> $TEMPSTATE
    echo "		}" >> $TEMPSTATE
    echo "	}" >> $TEMPSTATE
    echo "}" >> $TEMPSTATE
    sudo sh -c "cp -f $TEMPSTATE /boot/crankshaft/alsactl.state"
}

function cs_audio_allo() {
    sudo sed -i 's/^dtparam=audio=.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=hifiberry.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=audioinjector.*//' /boot/config.txt
    sudo sed -i 's/^dtoverlay=allo.*//' /boot/config.txt
    sudo sed -i 's/^# Enable audio (loads snd_bcm2835).*//' /boot/config.txt
    sudo sed -i 's/^# Audio Setup.*//' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# Audio Setup' >> /boot/config.txt"
    sudo sh -c "echo 'dtoverlay=allo-'$1'-dac-pcm512x-audio' >> /boot/config.txt"
    sudo sh -c "rm -f /boot/crankshaft/alsactl.state"
}

# RTC functions
function cs_rtc() {
    sudo sed -i 's/^# RTC Setup.*//' /boot/config.txt
    sudo sed -i '/dtoverlay=i2c-rtc/d' /boot/config.txt
    sudo sed -i '/dtoverlay=i2c_arm=/d' /boot/config.txt
    sudo sed -i '/i2c*/d' /etc/modules
    sudo sed -i '/./,/^$/!d' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /etc/modules
    sudo sh -c "echo '' >> /boot/config.txt"
    sudo sh -c "echo '# RTC Setup' >> /boot/config.txt"
    sudo sh -c "echo 'dtoverlay=i2c_arm=on' >> /boot/config.txt"
    sudo sh -c "echo 'dtoverlay=i2c-rtc,'$1 >> /boot/config.txt"
    sudo sh -c "echo 'i2c-dev' >> /etc/modules"
    sudo sed -i 's/^RTC_DAYNIGHT=.*/RTC_DAYNIGHT=1/' /boot/crankshaft/crankshaft_env.sh
    sudo systemctl disable fake-hwclock.service >/dev/null 2>&1
    sudo systemctl enable hwclock-load.service >/dev/null 2>&1
    sudo systemctl enable hwclock-save.service >/dev/null 2>&1
    sudo systemctl daemon-reload
    sudo dpkg-reconfigure tzdata
}

# Display functions

function cs_check_usbdevice() {
    sudo lsusb | cut -d" " -f2,4 | sed 's/://g' |
    while IFS= read -r line
    do
	bus=$(echo $line | cut -d" " -f1)
	device=$(echo $line | cut -d" " -f2)
	FULLDESC=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL=|ID_MODEL_ID=|ID_VENDOR=|ID_VENDOR_ID=)' | sed 's/E: //g'`
	ID_MODEL=`echo $FULLDESC | cut -d" " -f1 | grep ID_MODEL= | cut -d= -f2`
	ID_MODEL_ID=`echo $FULLDESC | cut -d" " -f2 | grep ID_MODEL_ID= | cut -d= -f2`
	ID_VENDOR=`echo $FULLDESC | cut -d" " -f3 | grep ID_VENDOR= | cut -d= -f2`
	ID_VENDOR_ID=`echo $FULLDESC | cut -d" " -f4 | grep ID_VENDOR_ID= | cut -d= -f2`
	if [ "$ID_MODEL" == "$1" ] && [ "$ID_MODEL_ID" == "$2" ] && [ "$ID_VENDOR" == "$3" ] && [ "$ID_VENDOR_ID" == "$4" ]; then
	    cs_echo "Identified!"
	fi
    done
}

function cs_show_autodetect() {
    sudo plymouth --hide-splash > /dev/null 2>&1 # hide the boot splash
    sudo chvt 3
    echo "[${RED}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
    echo "[${RED}${BOLD} INFO ${RESET}] Display identified - Setting up..." >/dev/tty3
    echo "[${RED}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
}

function cs_clean_display_entry() {
    sudo sed -i 's/^# Custom display settings.*//' /boot/config.txt
    sudo sed -i '/hdmi_group=/d' /boot/config.txt
    sudo sed -i '/hdmi_mode=/d' /boot/config.txt
    sudo sed -i '/hdmi_cvt=/d' /boot/config.txt
    sudo sed -i '/hdmi_drive=/d' /boot/config.txt
    sudo sed -i '/hdmi_force_hotplug=/d' /boot/config.txt
    sudo sed -i '/./,/^$/!d' /boot/config.txt
}

function cs_clear_screen_header() {
    PPIDCHECK=$(ps $PPID | tail -1 | awk '{print $6}')
    if [[ ! $SHLVL -gt 2 ]] && [ -z $PPIDCHECK ]; then
	clear
	cs_echo "${MAGENTA}${BOLD}Crankshaft Management Tool v$version is executing command...${RESET}"
	cs_echo ""
    fi
}

# echo if user logged in
function cs_echo() {
    PPIDCHECK=$(ps $PPID | tail -1 | awk '{print $6}')
    if [[ ! $SHLVL -gt 2 ]] && [ -z $PPIDCHECK ]; then
	echo $1
    fi
}

# Abort if file does not exist

if [ ! -z $1 ]; then
    if [ $1 != "display" ] && [ $1 != "brightness" ] && [ $1 != "filesystem" ] && [ $1 != "timers" ] && [ $1 != "settings" ] && [ $1 != "services" ] && [ $1 != "update" ] && [ $1 != "audio" ] && [ $1 != "rtc" ] && [ $1 != "reset" ] && [ $1 != "rpicam" ] && [ $1 != "resize" ] && [ $1 != "usb" ] && [ $1 != "gpio" ] && [ $1 != "hotspot" ] && [ $1 != "syslog" ] && [ $1 != "debuglog" ] && [ $1 != "version" ]; then
	cs_echo "Unknown command:"
	cs_echo "${YELLOW}${BOLD}Syntax: crankshaft display|brightness|filesystem|timers|audio|settings|services|rpicam|reset|usb|resize|gpio|hotspot|syslog|update|debuglog|version${RESET}"
	exit 0
    fi

    cs_clear_screen_header

    # brightness
    if [ $1 == "brightness" ]; then
		if [ -f ${BRIGHTNESS_FILE} ]; then
			case $2 in
				save)
					cs_bootrw
					if [ -f /tmp/night_mode_enabled ]; then
						sudo sh -c 'cat '${BRIGHTNESS_FILE}' > '${CS_BRIGHTNESS_NIGHT_STORE_FILE}
						cs_echo "Brightness Level Night Saved"
					else
						sudo sh -c 'cat '${BRIGHTNESS_FILE}' > '${CS_BRIGHTNESS_STORE_FILE}
						cs_echo "Brightness Level Day Saved"
					fi
					cs_bootro
					;;
				restore)
					if [ -f /tmp/night_mode_enabled ]; then
						if [ -f ${CS_BRIGHTNESS_NIGHT_STORE_FILE} ]; then
							LVL=`cat ${CS_BRIGHTNESS_NIGHT_STORE_FILE}`
							echo ${LVL} > ${BRIGHTNESS_FILE}
							cs_echo "Brightness Level Night Restored"
						else
							echo ${BR_MAX} > ${BRIGHTNESS_FILE}
							cs_echo "Brightness Level Night Restored by default value"
						fi
						if [ -f ${CS_BRIGHTNESS_STORE_FILE} ]; then
							LVL=`cat ${CS_BRIGHTNESS_STORE_FILE}`
							echo ${LVL} > ${BRIGHTNESS_FILE}
							cs_echo "Brightness Level Day Restored"
						else
							echo ${BR_MAX} > ${BRIGHTNESS_FILE}
							cs_echo "Brightness Level Day Restored by default value"
						fi
					fi
					;;
				up)
					LVL=`cat ${BRIGHTNESS_FILE}`
					if [ $((${LVL} + ${BR_STEP})) -le ${BR_MAX} ]; then
						echo $((${LVL} + ${BR_STEP})) > ${BRIGHTNESS_FILE}
						cs_echo "Brightness Level Increased To: $((${LVL} + ${BR_STEP}))"
					fi
					;;
				down)
					LVL=`cat ${BRIGHTNESS_FILE}`
					if [ $((${LVL} - ${BR_STEP})) -ge ${BR_MIN} ]; then
						echo $((${LVL} - ${BR_STEP})) > ${BRIGHTNESS_FILE}
						cs_echo "Brightness Level Reduced To: $((${LVL} + ${BR_STEP}))"
					fi
				;;
				min)
					echo ${BR_MIN} > ${BRIGHTNESS_FILE}
					cs_echo "Brightness Level Set To Min: ${BR_MIN}"
					;;
				max)
					echo ${BR_MAX} > ${BRIGHTNESS_FILE}
					cs_echo "Brightness Level Set To Max: ${BR_MAX}"
					;;
				get)
					if [ ! -z $3 ]; then
						if [ $3 == "location" ]; then
							echo ${BRIGHTNESS_FILE}
						elif [ $3 == "level" ]; then
							# get current brightness level
							LVL=`cat ${BRIGHTNESS_FILE}`
							cs_echo "Cutrent Brightness Level: $LVL"
						else
							cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness get location|level${RESET}"
						fi
					else
						cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness get location|level${RESET}"
					fi
					;;
				set)
					if [ ! -z $3 ]; then
						echo $3 > ${BRIGHTNESS_FILE}
						cs_echo "Brightness Level Set To Min: $3"
					fi
					;;
				*)
					cs_echo "${YELLOW}${BOLD}Syntax: crankshaft brightness save|restore|up|down|min|max|set|get${RESET}"
					;;
			esac
		else
			cs_echo "No device brightness file present"
		fi
    fi

    # filesystem
    if [ $1 == "filesystem" ]; then
	case $2 in
	    system)
		if [ ! -z $3 ]; then
		    if [ $3 == "unlock" ]; then
			cs_systemrw
		    elif [ $3 == "lock" ]; then
			cs_systemro
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem system lock|unlock${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem system lock|unlock${RESET}"
		fi
		;;
	    boot)
		if [ ! -z $3 ]; then
		    if [ $3 == "unlock" ]; then
			cs_bootrw
		    elif [ $3 == "lock" ]; then
			cs_bootro
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem boot lock|unlock${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem boot lock|unlock${RESET}"
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft filesystem system|boot${RESET}"
		;;
	esac
    fi

    #timers
    if [ $1 == "timers" ]; then
	case $2 in
	    status)
		cs_echo "${CYAN}${BOLD}"
	    	sudo systemctl list-timers --all --no-pager | head -1
		cs_echo "_____________________________________________________________________________________________________________________${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Day mode${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep daymode
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Night mode${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep nightmode
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Display backlight off/blank while no phone connected${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep disconnect
		cs_echo "${RESET}"
		cs_echo ""
		cs_echo "${GREEN}${BOLD}Shutdown while no phone connected${RESET}"
		cs_echo "---------------------------------------------------------------------------------------------------------------------"
		cs_echo "${YELLOW}"
    		sudo systemctl list-timers --all --no-pager | grep shutdown
		cs_echo "${RESET}"
		;;
	    disconnect)
		if [ ! -z $3 ]; then
		    if [ $3 == "stop" ]; then
			sudo systemctl stop disconnect.timer >/dev/null 2>&1
			sudo systemctl stop disconnect.service >/dev/null 2>&1
		    elif [ $3 == "start" ]; then
			sudo systemctl stop disconnect.timer >/dev/null 2>&1
			sudo systemctl stop disconnect.service >/dev/null 2>&1
			cs_systemrw
			if [ ! -z $DISCONNECTION_SCREEN_POWEROFF_SECS ]; then
			    if [ -f /etc/cs_first_start_done ]; then
				sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_SCREEN_POWEROFF_SECS's/' /etc/systemd/system/disconnect.timer
			    else
				sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec=300s/' /etc/systemd/system/disconnect.timer
			    fi
			fi
			cs_systemro
			if [ ! -f /tmp/android_device ]; then
			    sudo systemctl start disconnect.timer >/dev/null 2>&1
			fi
		    elif [ $3 == "set" ] && [ ! -z $4 ]; then
			re='^[0-9]+$'
			if [[ $4 =~ $re ]]; then
			    cs_bootrw
			    sudo sed -i 's/^DISCONNECTION_SCREEN_POWEROFF_SECS=.*/DISCONNECTION_SCREEN_POWEROFF_SECS='$4'/' /boot/crankshaft/crankshaft_env.sh
			    cs_bootro
			else
			    cs_echo "Not numeric"
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers disconnect start|stop|set${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers disconnect start|stop|set${RESET}"
		fi
		;;
	    shutdown)
		if [ ! -z $3 ]; then
		    if [ $3 == "stop" ]; then
			sudo systemctl stop shutdown.timer >/dev/null 2>&1
			sudo systemctl stop shutdown.service >/dev/null 2>&1
		    elif [ $3 == "start" ]; then
			sudo systemctl stop shutdown.timer >/dev/null 2>&1
			sudo systemctl stop shutdown.service >/dev/null 2>&1
			if [ ! -z $DISCONNECTION_POWEROFF_MINS ]; then
			    cs_systemrw
			    sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_POWEROFF_MINS'm/' /etc/systemd/system/shutdown.timer
			    cs_systemrw
			fi
			if [ ! -f /tmp/android_device ]; then
			    sudo systemctl start shutdown.timer >/dev/null 2>&1
			fi
		    elif [ $3 == "set" ] && [ ! -z $4 ]; then
			re='^[0-9]+$'
			if [[ $4 =~ $re ]]; then
			    cs_bootrw
			    sudo sed -i 's/^DISCONNECTION_POWEROFF_MINS=.*/DISCONNECTION_POWEROFF_MINS='$4'/' /boot/crankshaft/crankshaft_env.sh
			    cs_bootro
			else
			    cs_echo "Not numeric"
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers shutdown start|stop|set${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers shutdown start|stop|set${RESET}"
		fi
		;;
	    stop)
		sudo systemctl stop disconnect.timer >/dev/null 2>&1
		sudo systemctl stop disconnect.service >/dev/null 2>&1
		sudo systemctl stop shutdown.timer >/dev/null 2>&1
		sudo systemctl stop shutdown.service >/dev/null 2>&1
		;;
	    start)
		sudo systemctl stop disconnect.timer >/dev/null 2>&1
		sudo systemctl stop disconnect.service >/dev/null 2>&1
		sudo systemctl stop shutdown.timer >/dev/null 2>&1
		sudo systemctl stop shutdown.service >/dev/null 2>&1
		if [ ! -f /tmp/devmode_enabled ]; then
		    cs_systemrw
		    if [ ! -z $DISCONNECTION_SCREEN_POWEROFF_SECS ]; then
			if [ -f /etc/cs_first_start_done ]; then
			    sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_SCREEN_POWEROFF_SECS's/' /etc/systemd/system/disconnect.timer
			else
			    sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec=300s/' /etc/systemd/system/disconnect.timer
			fi
		    fi
		    if [ ! -z $DISCONNECTION_POWEROFF_MINS ]; then
			sudo sed -i 's/.*OnActiveSec=.*/ OnActiveSec='$DISCONNECTION_POWEROFF_MINS'm/' /etc/systemd/system/shutdown.timer
		    fi
		    if [ ! -f /tmp/android_device ]; then
			sudo systemctl start shutdown.timer >/dev/null 2>&1
			sudo systemctl start disconnect.timer >/dev/null 2>&1
		    fi
		    cs_systemro
		fi
		;;
	    daynight)
		if [ -z $3 ] || [ -z $4 ]; then
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 1${RESET}"
		else
		    if [[ "$3" =~ ^[0-9]+$ ]] && [[ "$4" =~ ^[0-9]+$ ]]; then
			if [ "$3" -ge 24 ] || [ "$4" -ge 24 ]; then
			    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 2${RESET}"
			else
			    if [ "$3" -gt "$4" ]; then
				cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 3${RESET}"
			    else
				night=$(expr $4 - 1)
				dayhours="$3..$night"
				cs_echo "Day hours: $3..$night"
				# Night hours 0 -> day start
				hours="0"
				for ((i=1; i<$3; ++i))
				do
				    hours="$hours,$i"
				done
				# Night hours day end - 24(0)
				for ((i=$4; i<24; ++i))
				do
				    hours="$hours,$i"
				done
				cs_echo "Night hours: $hours"
				# Setup env
                                cs_bootrw
                                cs_systemrw
				sudo sed -i 's/^RTC_DAY_START=.*/RTC_DAY_START='$3'/' /boot/crankshaft/crankshaft_env.sh
				sudo sed -i 's/^RTC_NIGHT_START=.*/RTC_NIGHT_START='$4'/' /boot/crankshaft/crankshaft_env.sh
				# Setup timers
				sudo sed -i 's/.*OnCalendar=.*/ OnCalendar=*-*-* '$3'..'$night':*:00/' /etc/systemd/system/daymode.timer
				sudo sed -i 's/.*OnCalendar=.*/ OnCalendar=*-*-* '$hours':*:00/' /etc/systemd/system/nightmode.timer
				sudo systemctl daemon-reload >/dev/null 2>&1
				sudo systemctl stop daymode.timer >/dev/null 2>&1
				sudo systemctl stop daymode.service >/dev/null 2>&1
				sudo systemctl stop nightmode.timer >/dev/null 2>&1
				sudo systemctl stop nightmode.service >/dev/null 2>&1
				sudo systemctl start daymode.timer >/dev/null 2>&1
				sudo systemctl start nightmode.timer >/dev/null 2>&1
                                cs_bootro
                                cs_systemro
			    fi
			fi
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers daynight 0-23 0-23 | 3${RESET}"
		    fi
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft timers status|shutdown|disconnect|start|stop|daynight${RESET}"
		;;
	esac
    fi

    #audio
    if [ $1 == "audio" ]; then
	case $2 in
	    rpi)
		cs_bootrw
		cs_audio_rpi
		cs_bootrw
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    hifiberry)
		if [ ! -z $3 ]; then
		    if [ $3 == "dac" ]; then
			cs_bootrw
			cs_audio_hifiberry "dac"
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    elif [ $3 == "dacplus" ]; then
			cs_bootrw
			cs_audio_hifiberry "dacplus"
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    elif [ $3 == "digi" ]; then
			cs_bootrw
			cs_audio_hifiberry "digi"
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    elif [ $3 == "amp" ]; then
			cs_bootrw
			cs_audio_hifiberry "amp"
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio hifiberry dac|dacplus|digi|amp${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio hifiberry dac|dacplus|digi|amp${RESET}"
		fi
		;;
	    audioinjector)
		if [ ! -z $3 ]; then
		    if [ $3 == "zero" ]; then
			cs_bootrw
			cs_audio_audioinjector "wm8731-audio"
                        cs_audio_audioinjector_controls
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    elif [ $3 == "stereo" ]; then
			cs_bootrw
			cs_audio_audioinjector "wm8731-audio"
                        cs_audio_audioinjector_controls
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio audioinjector zero|stereo${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio audioinjector zero|stereo${RESET}"
		fi
		;;
	    allo)
		if [ ! -z $3 ]; then
		    if [ $3 == "boss" ]; then
			cs_bootrw
			cs_audio_allo "boss"
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    elif [ $3 == "piano" ]; then
			cs_bootrw
			cs_audio_allo "piano"
			cs_bootro
			cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		    else
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio allo boss|piano${RESET}"
		    fi
		else
		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio allo boss|piano${RESET}"
		fi
		;;
	    volume)
		if [ ! -z $3 ]; then
		    if [ $3 == "set" ] && [ ! -z $4 ]; then
			amixer -q set Master $4%
		    elif [ $3 == "set" ] && [ -z $4 ]; then
			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio volume set (0-100)${RESET}"
		    elif [ $3 == "get" ]; then
			volume=`amixer get Master | grep % | grep Left |awk '{print $5}'| sed 's/\[//' | sed 's/\]//'`
			cs_echo $volume
		    elif [ $3 == "up" ]; then
			volume_old=`amixer get Master | grep % | grep Left |awk '{print $5}'| sed 's/\[//' | sed 's/\]//'`
			amixer -q set Master 5%+
			volume=`amixer get Master | grep % | grep Left |awk '{print $5}'| sed 's/\[//' | sed 's/\]//'`
			cs_echo "Old volume: $volume_old - New volume: $volume"
		    elif [ $3 == "down" ]; then
			volume_old=`amixer get Master | grep % | grep Left |awk '{print $5}'| sed 's/\[//' | sed 's/\]//'`
			amixer -q set Master 5%-
			volume=`amixer get Master | grep % | grep Left |awk '{print $5}'| sed 's/\[//' | sed 's/\]//'`
			cs_echo "Old volume: $volume_old - New volume: $volume"
		    elif [ $3 == "save" ]; then
			cs_bootrw
			volume=`amixer get Master | grep % | grep Left |awk '{print $5}'| sed 's/\[//' | sed 's/\]//' | sed 's/\%//' `
			sudo sh -c 'echo "'${volume}'" > '$CS_VOLUME_STORE_FILE
			cs_echo "Volume Level Saved"
			cs_bootro
		    elif [ $3 == "restore" ]; then
			if [ -f ${CS_VOLUME_STORE_FILE} ]; then
			    volume=`cat ${CS_VOLUME_STORE_FILE}`
			    if [ $volume -gt ${STARTUP_VOL_MAX} ]; then
				amixer -q set Master ${STARTUP_VOL_MAX}%
			    else
				amixer -q set Master $volume%
			    fi
			    cs_echo "Volume Restored"
			else
			    cs_echo "Volume File Missing - Skipping restore"
			fi
		    else
    			cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio volume set|get|up|down|save|restore${RESET}"
		    fi
		else
    		    cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio volume set|get|up|down|save|restore${RESET}"
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft audio rpi|hifiberry|volume${RESET}"
		;;
	esac
    fi

    #display
    if [ $1 == "display" ]; then
	case $2 in
	    on)
		sudo vcgencmd display_power 1 >/dev/null 2>&1
		if [ -f /sys/class/backlight/rpi_backlight/bl_power ]; then
		    sudo sh -c 'echo 0 > /sys/class/backlight/rpi_backlight/bl_power'
		fi
		;;
	    off)
		sudo vcgencmd display_power 0 >/dev/null 2>&1
		if [ -f /sys/class/backlight/rpi_backlight/bl_power ]; then
		    sudo sh -c 'echo 1 > /sys/class/backlight/rpi_backlight/bl_power'
		fi
		;;
	    autodetect)
		if [ "$(dmesg | grep -i ft5406)" != "" ]; then
		    # RPi Display
		    cs_show_autodetect
		    cs_bootrw
		    sudo sh -c "echo 'RPi Display' > /boot/crankshaft/display_detected"
		    cs_clean_display_entry
		    # Disable autodetect
		    sudo sed -i 's/^DISPLAY_AUTO_DETECT=.*/DISPLAY_AUTO_DETECT=0/' /boot/crankshaft/crankshaft_env.sh
		    cs_bootro
		    sudo /sbin/shutdown -r now
		fi

		if [ $DISPLAY_AUTO_DETECT -eq 1 ]; then
		    # Waveshare Inc. 7inch HDMI LCD(B) Rev2.1
		    check=$(cs_check_usbdevice "By_ZH851" "0005" "BYZHYYZHY" "0eef")
		    if [ "$check" == "Identified!" ]; then
			cs_show_autodetect
		        cs_bootrw
		        sudo sh -c "echo '0eef:0005 - Waveshare Inc. 7inch HDMI LCD (b) Rev 2.1' > /boot/crankshaft/display_detected"
		        cs_clean_display_entry
		        sudo sh -c "echo '' >> /boot/config.txt"
		        sudo sh -c "echo '# Custom display settings' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_group=2' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_mode=87' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_cvt=800 480 60 6 0 0 0' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_drive=1' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_force_hotplug=1' >> /boot/config.txt"
			# Disable autodetect
			sudo sed -i 's/^DISPLAY_AUTO_DETECT=.*/DISPLAY_AUTO_DETECT=0/' /boot/crankshaft/crankshaft_env.sh
		        cs_bootro
			sudo /sbin/shutdown -r now
		    fi

		    # eGalax Inc. Touch Display
		    check=`/usr/bin/lsusb | grep 0eef:0001 | awk {'print $6'}`
		    if [ ! -z $check ]; then
                        cs_show_autodetect
		        cs_bootrw
		        sudo sh -c "echo '0eef:0001 - eGalax Inc. Touch Display' > /boot/crankshaft/display_detected"
		        cs_clean_display_entry
		        sudo sh -c "echo '' >> /boot/config.txt"
		        sudo sh -c "echo '# Custom display settings' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_group=2' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_mode=87' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_cvt=800 480 60 3 0 0 0' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_drive=1' >> /boot/config.txt"
		        sudo sh -c "echo 'hdmi_force_hotplug=1' >> /boot/config.txt"
			# Disable autodetect
			sudo sed -i 's/^DISPLAY_AUTO_DETECT=.*/DISPLAY_AUTO_DETECT=0/' /boot/crankshaft/crankshaft_env.sh
		        cs_bootro
			sudo /sbin/shutdown -r now
		    fi

		    # No known display detected - disable auto detect during boot
		    cs_bootrw
		    sudo sed -i 's/^DISPLAY_AUTO_DETECT=.*/DISPLAY_AUTO_DETECT=0/' /boot/crankshaft/crankshaft_env.sh
	    	    cs_bootro
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft display on|off|autodetect${RESET}"
		;;
	esac
    fi

    #settings
    if [ $1 == "settings" ]; then
	case $2 in
	    save)
		cs_bootrw
		# Copy settings file
		sudo cp -f /tmp/openauto.ini /boot/crankshaft/openauto.ini
		cs_bootrw
		;;
	    restore)
		if [ -f /boot/crankshaft/openauto.ini ]; then
		    sudo cp -f /boot/crankshaft/openauto.ini /tmp/openauto.ini
		else
		    echo "[General]" > /tmp/openauto.ini
		    echo "ShowClock=true" >> /tmp/openauto.ini
		    echo "[Video]" >> /tmp/openauto.ini
		    echo "FPS=1" >> /tmp/openauto.ini
		    echo "OMXLayerIndex=0" >> /tmp/openauto.ini
		fi
		sudo chown pi:pi /tmp/openauto.ini
		sudo chmod 777 /tmp/openauto.ini
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft settings save|restore${RESET}"
		;;
	esac
    fi

    #rtc
    if [ $1 == "rtc" ]; then
	case $2 in
	    abx80x)
		cs_bootrw
		cs_systemrw
		cs_rtc "abx80x"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    ds1307)
		cs_bootrw
		cs_systemrw
		cs_rtc "ds1307"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    ds1339)
		cs_bootrw
		cs_systemrw
		cs_rtc "ds1339"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    mcp7940x)
		cs_bootrw
		cs_systemrw
		cs_rtc "mcp7940x"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    mcp7941x)
		cs_bootrw
		cs_systemrw
		cs_rtc "mcp7941x"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    ds3231)
		cs_bootrw
		cs_systemrw
		cs_rtc "ds3231"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    pcf2127)
		cs_bootrw
		cs_systemrw
		cs_rtc "pcf2127"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    pcf8523)
		cs_bootrw
		cs_systemrw
		cs_rtc "pcf8523"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    pcf8563)
		cs_bootrw
		cs_systemrw
		cs_rtc "pcf8563"
		cs_systemro
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    sync)
		# sync rtc time with sys
		sudo hwclock -s >/dev/null 2>&1
		# try sync with timeserver
		ping -c1 -w1 google.com >/dev/null 2>&1
		if [ "$?" = 0 ]
		then
		    cs_echo "---------------------------------------------------------"
		    cs_echo "Internet connection present. Syncing RTC with time server"
		    cs_echo "---------------------------------------------------------"
		    # disable/enable timesyncd to trigger resync
		    sudo timedatectl set-ntp 0
		    sudo timedatectl set-ntp 1
		    cs_echo "---------------------------------------------------------"
		    cs_echo "Wait for timesync..."
		    cs_echo "---------------------------------------------------------"
		    sleep 10
		    # write time from server to hwclock
		    sudo hwclock -w >/dev/null 2>&1
		    # write time from hwclock to sys
		    sudo hwclock -s >/dev/null 2>&1
		    # show result
		    sudo timedatectl status
		    cs_echo ""
		    cat /var/log/syslog | grep Synchronized | tail -n1 | awk {'print $3" "$6" "$7" "$8" "$9" "$10'}
		else
		    cs_echo "---------------------------------------------------------"
		    cs_echo "No internet connection!"
		    cs_echo "---------------------------------------------------------"
		fi
		;;
	    status)
		sudo timedatectl status
		;;
	    disable)
		cs_bootrw
		cs_systemrw
		#delete clock
		sudo sed -i 's/^# RTC Setup.*//' /boot/config.txt
    		sudo sed -i '/dtoverlay=i2c-rtc/d' /boot/config.txt
    		sudo sed -i '/dtoverlay=i2c_arm=/d' /boot/config.txt
		sudo sed -i 's/^RTC_DAYNIGHT=.*/RTC_DAYNIGHT=0/' /boot/crankshaft/crankshaft_env.sh
    		sudo sed -i '/i2c*/d' /etc/modules
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /etc/modules
		sudo sed -i '/./,/^$/!d' /boot/crankshaft/crankshaft_env.sh
		sudo systemctl disable hwclock-load.service >/dev/null 2>&1
		sudo systemctl disable hwclock-save.service >/dev/null 2>&1
		sudo systemctl enable fake-hwclock.service >/dev/null 2>&1
		sudo systemctl daemon-reload
		cs_systemro
		cs_bootro
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft rtc abx80x|ds1307|ds1339|mcp7940x|mcp7941x|ds3231|pcf2127|pcf8523|pcf8563|sync|status|disable${RESET}"
		;;
	esac
    fi

    #services
    if [ $1 == "services" ]; then
	case $2 in
	    reset)
		# Set default startup services state
		sudo systemctl enable gpio2kbd.service >/dev/null 2>&1
		sudo systemctl enable crankshaft.service >/dev/null 2>&1
		sudo systemctl enable user_startup.service >/dev/null 2>&1
		sudo systemctl enable devmode.service >/dev/null 2>&1
		sudo systemctl enable debugmode.service >/dev/null 2>&1
		sudo systemctl enable display.service >/dev/null 2>&1
		sudo systemctl enable update.service >/dev/null 2>&1
		sudo systemctl enable usbrestore.service >/dev/null 2>&1
		sudo systemctl enable usbdetect.service >/dev/null 2>&1
		sudo systemctl enable user_startup.service >/dev/null 2>&1
		sudo systemctl enable daymode.timer >/dev/null 2>&1
		sudo systemctl enable nightmode.timer >/dev/null 2>&1
		sudo systemctl enable tap2wake.service >/dev/null 2>&1
		sudo systemctl enable regensshkeys.service >/dev/null 2>&1
		sudo systemctl enable ssh.service >/dev/null 2>&1
		sudo systemctl enable openauto.service >/dev/null 2>&1
		sudo systemctl enable fake-hwclock.service >/dev/null 2>&1
		sudo systemctl enable gpiotrigger.service >/dev/null 2>&1
		sudo systemctl enable timerstart.service >/dev/null 2>&1
		sudo systemctl disable rpicamserver.service >/dev/null 2>&1
		sudo systemctl disable wpa_supplicant.service >/dev/null 2>&1
		sudo systemctl disable networking.service >/dev/null 2>&1
		sudo systemctl disable dhcpcd.service >/dev/null 2>&1
		sudo systemctl disable regenerate_ssh_host_keys.service >/dev/null 2>&1
		sudo systemctl disable wifisetup.service >/dev/null 2>&1
		sudo systemctl disable systemd-rfkill.service >/dev/null 2>&1
		sudo systemctl disable systemd-rfkill.socket >/dev/null 2>&1
		sudo systemctl disable systemd-timesyncd.service >/dev/null 2>&1
		sudo systemctl disable resize2fs_once.service >/dev/null 2>&1
		sudo systemctl disable hwclock-load.service >/dev/null 2>&1
		sudo systemctl disable hwclock-save.service >/dev/null 2>&1
		sudo systemctl disable bluetooth.service >/dev/null 2>&1
		sudo systemctl disable hciuart.service >/dev/null 2>&1
		sudo systemctl disable hostapd.service >/dev/null 2>&1
		sudo systemctl disable dnsmasq.service >/dev/null 2>&1
		sudo systemctl disable hotspot.service >/dev/null 2>&1
		sudo systemctl disable systemd-backlight@.service >/dev/null 2>&1
		sudo systemctl daemon-reload >/dev/null 2>&1
		;;
	    status)
		systemctl list-units --type=service --all | grep 'Crankshaft\|UNIT'
		;;
	    failed)
		systemctl list-units --state=failed --no-pager --all
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft services status|reset|failed${RESET}"
		;;
	esac
    fi

    #reset
    if [ $1 == "reset" ]; then
	case $2 in
	    config.txt)
		cs_bootrw

		# display
		hdmi_group=`cat /boot/config.txt | grep ^hdmi_group= | cut -d= -f2`
		hdmi_mode=`cat /boot/config.txt | grep ^hdmi_mode= | cut -d= -f2`
		hdmi_cvt=`cat /boot/config.txt | grep ^hdmi_cvt= | cut -d= -f2`
		# in many samples hdmi_cvt ist set as 'hdmi_cvt xyz' which is wrong by missing '=' - failsafe
		if [ -z $hdmi_cvt ]; then
		    hdmi_cvt=`cat /boot/config.txt | grep '^hdmi_cvt ' | cut -d' ' -f2-`
		fi
		hdmi_drive=`cat /boot/config.txt | grep ^hdmi_drive= | cut -d= -f2`
		hdmi_force_hotplug=`cat /boot/config.txt | grep ^hdmi_force_hotplug= | cut -d= -f2`
		config_hdmi_boost=`cat /boot/config.txt | grep ^config_hdmi_boost= | cut -d= -f2`

		# power
		current_limit_override=`cat /boot/config.txt | grep ^current_limit_override= | cut -d= -f2`
		max_usb_current=`cat /boot/config.txt | grep ^max_usb_current= | cut -d= -f2`
		avoid_warnings=`cat /boot/config.txt | grep ^avoid_warnings= | cut -d= -f2`

		# Clear config.txt		
		sudo sh -c "echo '' > /boot/config.txt"

		# Custom Display settings
		if [ ! -z "$hdmi_group" ] || [ ! -z "$hdmi_mode" ] || [ ! -z "$hdmi_cvt" ] || [ ! -z "$hdmi_drive" ] || [ ! -z "$hdmi_force_hotplug" ] || [ ! -z "$config_hdmi_boost" ]; then
		    sudo sh -c "echo '' >> /boot/config.txt"
		    sudo sh -c "echo '# Custom display settings' >> /boot/config.txt"
		    if [ ! -z "$hdmi_group" ]; then
			sudo sh -c "echo 'hdmi_group=$hdmi_group' >> /boot/config.txt"
		    fi
		    if [ ! -z "$hdmi_mode" ]; then
			sudo sh -c "echo 'hdmi_mode=$hdmi_mode' >> /boot/config.txt"
		    fi
		    if [ ! -z "$hdmi_cvt" ]; then
			sudo sh -c "echo 'hdmi_cvt=$hdmi_cvt' >> /boot/config.txt"
		    fi
		    if [ ! -z "$hdmi_drive" ]; then
			sudo sh -c "echo 'hdmi_drive=$hdmi_drive' >> /boot/config.txt"
		    fi
		    if [ ! -z "$hdmi_force_hotplug" ]; then
			sudo sh -c "echo 'hdmi_force_hotplug=$hdmi_force_hotplug' >> /boot/config.txt"
		    fi
		    if [ ! -z "$config_hdmi_boost" ]; then
			sudo sh -c "echo 'config_hdmi_boost=$config_hdmi_boost' >> /boot/config.txt"
		    fi
		fi

		# Custom power settings
		if [ ! -z "$current_limit_override" ] || [ ! -z "$max_usb_current" ] || [ ! -z "$avoid_warnings" ]; then
		    sudo sh -c "echo '' >> /boot/config.txt"
		    sudo sh -c "echo '# Custom power settings' >> /boot/config.txt"
		    if [ ! -z "$current_limit_override" ]; then
			sudo sh -c "echo 'current_limit_override=$current_limit_override' >> /boot/config.txt"
		    fi
		    if [ ! -z "$max_usb_current" ]; then
			sudo sh -c "echo 'max_usb_current=$max_usb_current' >> /boot/config.txt"
		    fi
		    if [ ! -z "$avoid_warnings" ]; then
			sudo sh -c "echo 'avoid_warnings=$avoid_warnings' >> /boot/config.txt"
		    fi
		fi

		# Crankshaft Base params
		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Disable Rainbow splash' >> /boot/config.txt"
		sudo sh -c "echo 'disable_splash=1' >> /boot/config.txt"

		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Disable the PWR LED.' >> /boot/config.txt"
		sudo sh -c "echo 'dtparam=pwr_led_trigger=none' >> /boot/config.txt"
		sudo sh -c "echo 'dtparam=pwr_led_activelow=off' >> /boot/config.txt"

	        sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# Audio Setup' >> /boot/config.txt"
		sudo sh -c "echo 'dtparam=audio=on' >> /boot/config.txt"

	        sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# GPU Mem' >> /boot/config.txt"
		sudo sh -c "echo 'gpu_mem=256' >> /boot/config.txt"

		# mount /boot ro after saving if not in dev mode
		cs_bootro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		cs_echo " --- Check config.txt before! ---"
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft reset config.txt${RESET}"
		;;
	esac
    fi

    #updates
    if [ $1 == "update" ]; then
	case $2 in
	    udev)
		REMOTE=`wget --no-check-certificate https://raw.githubusercontent.com/opencardev/prebuilts/master/udev/51-android.rules --spider --server-response -O - 2>&1 | sed -ne '/Content-Length/{s/.*: //;p}'`
		if [ -f /etc/udev/rules.d/51-android.master ]; then
		    LOCAL=`wc -c /etc/udev/rules.d/51-android.master | awk '{print $1}'`
		else
		    LOCAL=0
		fi
		if [ "$REMOTE" == "$LOCAL" ]; then
		    cs_echo "udev rules are up to date."
		else
                    cs_systemrw
		    # get source file
		    sudo wget --no-check-certificate -O /etc/udev/rules.d/51-android.master https://raw.githubusercontent.com/opencardev/prebuilts/master/udev/51-android.rules
		    # check download
		    LOCAL=`wc -c /etc/udev/rules.d/51-android.master | awk '{print $1}'`
		    if [ "$REMOTE" == "$LOCAL" ]; then
			# File which will be transformed
			DEST=/etc/udev/rules.d/51-android.rules
			sudo touch /etc/udev/rules.d/51-android.rules
			sudo chmod 666 /etc/udev/rules.d/51-android.rules
			# add master stuff
			echo '' > $DEST
			echo '# Skip storage devices' >> $DEST
                        echo 'KERNEL=="sd*", GOTO="SKIP_DEVICE"' >> $DEST
                        echo 'KERNEL=="sg*", GOTO="SKIP_DEVICE"' >> $DEST
                        echo 'SUBSYSTEM!="usb", GOTO="SKIP_DEVICE"' >> $DEST
			cat /etc/udev/rules.d/51-android.master >> $DEST
			# Add action
			sudo sed -i 's/GROUP="plugdev"$/GROUP="plugdev", RUN+="\/opt\/crankshaft\/usb_action.sh add '\'\$env\{ID_MODEL\}\'' '\''%E\{DEVNAME\}'\''"/' $DEST
			# Add disconnect action
			echo '' >> $DEST
			echo '# Disconnect action' >> $DEST
			echo 'SUBSYSTEM=="usb", ACTION=="remove", RUN+="/opt/crankshaft/usb_action.sh remove '\'\$env\{ID_MODEL\}\'' '\''%E{DEVNAME}'\''"' >> $DEST
			# Add disconnect action
			echo '' >> $DEST
			echo '# Skip action' >> $DEST
			echo 'LABEL="SKIP_DEVICE"' >> $DEST
			echo '' >> $DEST
			# Reload rules
			sudo udevadm control --reload-rules
			cs_echo "OK: udev rules updated."
		    else
			sudo rm /etc/udev/rules.d/51-android.master
			cs_echo "Fail: udev rules not updated."
		    fi
                    cs_systemro
		fi
		;;
	    csmt)
		REMOTE=`wget --no-check-certificate https://raw.githubusercontent.com/opencardev/prebuilts/master/csmt/crankshaft --spider --server-response -O - 2>&1 | sed -ne '/Content-Length/{s/.*: //;p}'`
		if [ -f /usr/local/bin/crankshaft ]; then
		    LOCAL=`wc -c /usr/local/bin/crankshaft | awk '{print $1}'`
		else
		    LOCAL=0
		fi
		if [ "$REMOTE" == "$LOCAL" ]; then
		    cs_echo "crankshaft management tool is up to date."
		else
                    cs_systemrw
                    sudo rm /usr/local/bin/crankshaft.update >/dev/null 2>&1
                    sudo rm /usr/local/bin/crankshaft.old >/dev/null 2>&1
		    # get source file
		    sudo wget --no-check-certificate -O /usr/local/bin/crankshaft.update https://raw.githubusercontent.com/opencardev/prebuilts/master/csmt/crankshaft
		    # check download
		    LOCAL=`wc -c /usr/local/bin/crankshaft.update | awk '{print $1}'`
		    if [ "$REMOTE" == "$LOCAL" ]; then
			sudo mv -f /usr/local/bin/crankshaft /usr/local/bin/crankshaft.old
			sudo cp -f /usr/local/bin/crankshaft.update /usr/local/bin/crankshaft
			sudo chmod 777 /usr/local/bin/crankshaft
			sudo rm /usr/local/bin/crankshaft.update
			cs_echo "OK: crankshaft management tool updated."
		    else
			sudo rm /usr/local/bin/crankshaft.update
			cs_echo "Fail: crankshaft management tool not updated."
		    fi
                    cs_systemro
		fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft update udev|csmt${RESET}"
		;;
	esac
    fi

    #rpi cam
    if [ $1 == "rpicam" ]; then
	case $2 in
	    enable)
		cs_bootrw
		cs_systemrw
		#setup cam
		sudo sed -i 's/^# RPI Camera Module.*//' /boot/config.txt
    		sudo sed -i '/start_x/d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /boot/config.txt
		sudo sh -c "echo '' >> /boot/config.txt"
		sudo sh -c "echo '# RPI Camera Module' >> /boot/config.txt"
		sudo sh -c 'echo "start_x=1" >> /boot/config.txt'
                sudo touch /etc/button_camera_visible
                sudo systemctl enable rpicamserver.service >/dev/null 2>&1
		cs_bootro
		cs_systemro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    disable)
		cs_bootrw
		cs_systemrw
		#remove cam
		sudo sed -i 's/^# RPI Camera Module.*//' /boot/config.txt
    		sudo sed -i '/start_x/d' /boot/config.txt
		sudo sed -i '/./,/^$/!d' /boot/config.txt
                sudo rm /etc/button_camera_visible
                sudo systemctl disable rpicamserver.service >/dev/null 2>&1
		cs_bootro
		cs_systemro
		cs_echo "${RED}${BOLD}Reboot needed to activate!${RESET}"
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft rpicam enable|disable${RESET}"
		;;
	esac
    fi

    #usb
    if [ $1 == "usb" ]; then
	case $2 in
	    list)
		cs_echo "This usb mass storage drives was detected:"
		cs_echo ""
		REMOVABLE_DRIVES=""
		for _device in /sys/block/*/device; do
		    if echo $(readlink -f "$_device")|egrep -q "usb"; then
		        _disk=$(echo "$_device" | cut -f4 -d/)
			LABEL=$(sudo blkid /dev/${_disk}1 | sed 's/.*LABEL="//' | cut -d'"' -f1)
			FSTYPE=$(sudo blkid /dev/${_disk}1 | sed 's/.*TYPE="//' | cut -d'"' -f1)
			cs_echo "Detected Drive: ${CYAN}${BOLD}${_disk}${RESET}"
			cs_echo "Label 1st Part: ${GREEN}${BOLD}${LABEL}${RESET}"
			cs_echo "PartFilesystem: ${YELLOW}${BOLD}${FSTYPE}${RESET}"
			cs_echo ""
			cs_echo "Mount: ${MAGENTA}${BOLD}crankshaft usb mount ${RESET}${CYAN}${BOLD}${_disk}${RESET}"
			cs_echo ""
			cs_echo "${RED}${BOLD}Note${RESET}: Only 1st partition will be used for mount!"
		    fi
		done
		;;
	    mount)
		if [ ! -z $3 ]; then
		    DEVICE=$3
		    DEVICE="${DEVICE}1"
                    if sudo mount | grep CSSTORAGE | grep /dev/$DEVICE > /dev/null; then
		        cs_echo "${YELLOW}${BOLD}USB device is CSSTORAGE and handled by system - exit...${RESET}"
		        cs_echo ""
		        cs_echo "Done."
			exit 0
                    else
		        if [ ! -d /media/USB ]; then
			    cs_systemrw
			    sudo mkdir /media/USB
			    cs_systemro
		        fi
		        if sudo mount | grep /media/USB > /dev/null; then
			    cs_echo "${YELLOW}${BOLD}Destination folder is still mounted - unmount it before new mount!${RESET}"
		    	    cs_echo ""
		    	    cs_echo "Done."
			    exit 0
		        fi
		        sudo mount -o sync /dev/$DEVICE /media/USB
		        if [ $? -ne 0 ]; then
			    cs_echo "${RED}${BOLD}Mount was not possible - abbort...${RESET}"
		        else
			    cs_echo "${GREEN}${BOLD}Mount successfull${RESET} - Device /dev/$DEVICE ($(sudo blkid /dev/$DEVICE | sed 's/.*LABEL="//' | cut -d'"' -f1))  mountet to /media/USB"
		        fi
                    fi
		fi
		;;
	    umount)
		sudo umount /media/USB
		if [ $? -ne 0 ]; then
		    cs_echo "${RED}${BOLD}Unmount was not possible - abbort...${RESET}"
		    cs_echo ""
		else
		    cs_echo "${GREEN}${BOLD}Unmount successfull - You can now remove device.${RESET}"
		    cs_echo ""
		    cs_echo "Done."
		fi
		;;
	    identify)
		    RUN=0
		    CHECK=`ps -ax | grep autoapp | grep -v grep | tail -n 1`
		    if [ "$CHECK" != "" ]; then
			echo "Auto exit OpenAuto (restart after exit of this check)..."
			echo ""
			sudo systemctl stop openauto
			RUN=1
			if [ -f /tmp/android_device ]; then
			    echo "Please disconnect your phone and reconnect to get correct id's"
			    echo "cause device switches the id's in android auto mode!"
			    echo ""
			    echo "Script is waiting 30 seconds..."
			    sleep 30
			fi
		    fi
		    sudo lsusb | cut -d" " -f2,4 | sed 's/://g' |
		    while IFS= read -r line
		    do
			bus=$(echo $line | cut -d" " -f1)
			device=$(echo $line | cut -d" " -f2)
			echo ""
			echo "${RED}${BOLD}USB-Device $bus/$device:${RESET}"
			echo ""
			FULLDESC=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL=|ID_MODEL_ID=|ID_VENDOR=|ID_VENDOR_ID=)' | sed 's/E: //g'`
			ID_MODEL=`echo $FULLDESC | cut -d" " -f1 | grep ID_MODEL= | cut -d= -f2`
			ID_MODEL_ID=`echo $FULLDESC | cut -d" " -f2 | grep ID_MODEL_ID= | cut -d= -f2`
			ID_MODEL_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
			ID_VENDOR=`echo $FULLDESC | cut -d" " -f3 | grep ID_VENDOR= | cut -d= -f2`
			ID_VENDOR_ID=`echo $FULLDESC | cut -d" " -f4 | grep ID_VENDOR_ID= | cut -d= -f2`
			ID_VENDOR_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_VENDOR_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
			echo "Model ID : "$ID_MODEL_ID
			echo "Vendor ID: "$ID_VENDOR_ID
			echo "Model    : "$ID_MODEL" ("$ID_MODEL_FROM_DATABASE")"
			echo "Vendor   : "$ID_VENDOR" ("$ID_VENDOR_FROM_DATABASE")"
		    done
		    if [ $RUN -eq 1 ]; then
			sudo systemctl start openauto
		    fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft usb list|mount|umount|identify${RESET}"
		;;
	esac
    fi

    #hotspot
    if [ $1 == "hotspot" ]; then
	case $2 in
	    status)
		HOSTAPD=`systemctl status hostapd | grep running | awk {'print $3'} | cut -d'(' -f2 | cut -d')' -f1`
		DNSMASQ=`systemctl status hostapd | grep running | awk {'print $3'} | cut -d'(' -f2 | cut -d')' -f1`
		cs_echo "Hostapd: $HOSTAPD"
		cs_echo "Dnsmasq: $DNSMASQ"
		cs_echo ""
                if [ -f /tmp/dnsmasq.leases ]; then
		    while read -r line
		    do
		        LEASE=`echo $line | awk {'print "Device: "$4" ("$2") - IP-Lease: "$3'}`
		        cs_echo "$LEASE"
		    done < "/tmp/dnsmasq.leases"
                else
                    cs_echo "No DHCP lease file present"
                fi
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft hotspot status${RESET}"
		;;
	esac
    fi

    #syslog
    if [ $1 == "syslog" ]; then
	cat /var/log/syslog
    fi

    #gpio
    if [ $1 == "gpio" ]; then
	case $2 in
	    status)
		if [ $ENABLE_GPIO -ne 1 ]; then
		    cs_echo ""
		    cs_echo "${RED}${BOLD}Note${RESET}: Usage of gpio's is not enabled during boot."
		    cs_echo ""
		fi

		DEV=$(gpio -g read $DEV_PIN)
		if [ ${#DEV_PIN} -ne 2 ]; then
		    SHOW_DEV="0"$DEV_PIN
		else
		    SHOW_DEV=$DEV_PIN
		fi
		INV=$(gpio -g read $INVERT_PIN)
		if [ ${#INV_PIN} -ne 2 ]; then
		    SHOW_INV="0"$INVERT_PIN
		else
		    SHOW_INV=$INV_PIN
		fi
		X11=$(gpio -g read $X11_PIN)
		if [ ${#X11_PIN} -ne 2 ]; then
		    SHOW_X11="0"$X11_PIN
		else
		    SHOW_X11=$X11_PIN
		fi
		if [ ${ANDROID_PIN} -ne 0 ]; then
		    ANDROID=$(gpio -g read $ANDROID_PIN)
		    if [ ${#ANDROID_PIN} -ne 2 ]; then
			SHOW_ANDROID="0"$ANDROID_PIN
		    else
			SHOW_ANDROID=$ANDROID_PIN
		    fi
		else
		    ANDROID=0
		    SHOW_ANDROID="--"
		fi

		cs_echo "${YELLOW}${BOLD}Dev Mode${RESET}"
		cs_echo "---------------------------------------------------------------"
		if [ $DEV -eq 1 ]; then
		    STATETEXT="${GREEN}${BOLD}Untriggered${RESET}"
		else
		    STATETEXT="${RED}${BOLD}Triggered${RESET}"
		fi
		cs_echo "GPIO: $SHOW_DEV - State: $STATETEXT"

		cs_echo ""
		cs_echo "${YELLOW}${BOLD}Invert Mode${RESET}"
		cs_echo "---------------------------------------------------------------"
		if [ $INV -eq 1 ]; then
		    STATETEXT="${GREEN}${BOLD}Untriggered${RESET}"
		else
		    STATETEXT="${RED}${BOLD}Triggered${RESET}"
		fi
		cs_echo "GPIO: $SHOW_INV - State: $STATETEXT"

		cs_echo ""
		cs_echo "${YELLOW}${BOLD}X11 Mode${RESET}"
		cs_echo "---------------------------------------------------------------"
		if [ $X11 -eq 1 ]; then
		    STATETEXT="${GREEN}${BOLD}Untriggered${RESET}"
		else
		    STATETEXT="${RED}${BOLD}Triggered${RESET}"
		fi
		cs_echo "GPIO: $SHOW_X11 - State: $STATETEXT"

		cs_echo ""
		cs_echo "${YELLOW}${BOLD}Android Connected${RESET}"
		cs_echo "---------------------------------------------------------------"
		if [ "$SHOW_ANDROID" == "--" ]; then
		    STATETEXT="${RED}${BOLD}disabled${RESET}"
		else
		    if [ $ANDROID -eq 1 ]; then
			STATETEXT="${GREEN}${BOLD}Untriggered${RESET}"
		    else
			STATETEXT="${RED}${BOLD}Triggered${RESET}"
		    fi
		fi
		cs_echo "GPIO: $SHOW_ANDROID - State: $STATETEXT"
		;;
	    all)
		ARRAY=( 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 )
		cs_echo ""
		cs_echo "${YELLOW}${BOLD}Overview GPIO State${RESET}"
		cs_echo "-----------------------------------"
		for PIN in ${ARRAY[*]}; do
		    STATE=$(gpio -g read $PIN)
		    if [ ${#PIN} -ne 2 ]; then
			SHOW="0"$PIN
		    else
			SHOW=$PIN
		    fi
		    if [ $STATE -eq 1 ]; then
			STATETEXT="${GREEN}${BOLD}Untriggered${RESET}"
		    else
			STATETEXT="${RED}${BOLD}Triggered${RESET}"
		    fi
		    cs_echo "GPIO: $SHOW - State: $STATETEXT"
		done
		;;
	    help)
		pinout
		;;
	    *)
		cs_echo "${YELLOW}${BOLD}Syntax: crankshaft gpio status|help${RESET}"
		;;
	esac
    fi

    #resize partition and fs
    if [ $1 == "resize" ]; then
	cs_systemrw
	currentsize=$(sudo parted /dev/mmcblk0p2 print | tail -n2 | head -n1 | awk {'print $4'})
	cs_echo "Current partition size: $currentsize"
        echo "[${CYAN}${BOLD} INFO ${RESET}] " >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] Current partition size: $currentsize" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
	cs_echo ""
	sleep 2
	sudo parted /dev/mmcblk0 resizepart 2 100% >/dev/null 2>&1
	newsize=$(sudo parted /dev/mmcblk0p2 print | tail -n2 | head -n1 | awk {'print $4'})
	cs_echo "New partition size: $newsize"
        echo "[${CYAN}${BOLD} INFO ${RESET}] " >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] New partition size: $newsize" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
	cs_echo ""
	sleep 2
	cs_echo "Start filesystem resize:"
	cs_echo ""
        echo "[${CYAN}${BOLD} INFO ${RESET}] " >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] Resizing filesystem..." >/dev/tty3
        echo "[${CYAN}${BOLD} INFO ${RESET}] *******************************************************" >/dev/tty3
	sudo resize2fs /dev/mmcblk0p2 >/dev/null 2>&1
        sudo touch /etc/cs_resize_done
	cs_systemro
    fi

    #debuglog
    if [ $1 == "debuglog" ]; then
	cs_bootrw
	cs_echo "Creating logs - Please wait..."
	sudo rm -rf /tmp/debuglogs >/dev/null 2>&1
	sudo mkdir /tmp/debuglogs
	sudo chmod 777 /tmp/debuglogs
	sudo cp -f /boot/config.txt /tmp/debuglogs/
	sudo cp -f /boot/cmdline.txt /tmp/debuglogs/
	sudo cp -f /boot/crankshaft/crankshaft_env.sh /tmp/debuglogs/
	sudo cp -f /tmp/wpa_supplicant.conf /tmp/debuglogs/
	sudo cp -f /etc/hostapd/hostapd.conf /tmp/debuglogs/
	sudo cp -f /home/pi/openauto.ini /tmp/debuglogs/
	sudo cp -f /home/pi/.xinitrc /tmp/debuglogs/
	cat /etc/crankshaft.build > /tmp/debuglogs/cs-version
	cat /etc/crankshaft.date >> /tmp/debuglogs/cs-version
	sudo cp -f /var/log/syslog /tmp/debuglogs/
	sudo cp -f /var/log/messages /tmp/debuglogs/
	sudo cp -f /var/log/kern.log /tmp/debuglogs/
	sudo cp -f /var/log/Xorg.0.log /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /var/log/daemon.log /tmp/debuglogs/
	sudo cp -f /var/log/user.log /tmp/debuglogs/
	sudo cp -f /etc/asound.conf /tmp/debuglogs/ >/dev/null 2>&1
	sudo cp -f /home/pi/.asoundrc /tmp/debuglogs/ >/dev/null 2>&1
	sudo cat /proc/asound/cards > /tmp/debuglogs/soundcards
	sudo /usr/bin/systemd-analyze plot > /tmp/debuglogs/startsequence.svg

	sudo lsusb | cut -d" " -f2,4 | sed 's/://g' |
	while IFS= read -r line
	do
	    bus=$(echo $line | cut -d" " -f1)
	    device=$(echo $line | cut -d" " -f2)
	    FULLDESC=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL=|ID_MODEL_ID=|ID_VENDOR=|ID_VENDOR_ID=)' | sed 's/E: //g'`
	    ID_MODEL=`echo $FULLDESC | cut -d" " -f1 | grep ID_MODEL= | cut -d= -f2`
	    ID_MODEL_ID=`echo $FULLDESC | cut -d" " -f2 | grep ID_MODEL_ID= | cut -d= -f2`
	    ID_MODEL_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_MODEL_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
	    ID_VENDOR=`echo $FULLDESC | cut -d" " -f3 | grep ID_VENDOR= | cut -d= -f2`
	    ID_VENDOR_ID=`echo $FULLDESC | cut -d" " -f4 | grep ID_VENDOR_ID= | cut -d= -f2`
	    ID_VENDOR_FROM_DATABASE=`sudo udevadm info -q all -n /dev/bus/usb/$bus/$device | grep -Ei '(ID_VENDOR_FROM_DATABASE=)' | sed 's/E: //g' | cut -d= -f2`
	    echo "Bus       : "$bus >> /tmp/debuglogs/usbdevices.log
	    echo "Device    : "$device >> /tmp/debuglogs/usbdevices.log
	    echo "Model ID  : "$ID_MODEL_ID >> /tmp/debuglogs/usbdevices.log
	    echo "Vendor ID : "$ID_VENDOR_ID >> /tmp/debuglogs/usbdevices.log
	    echo "Model     : "$ID_MODEL" ("$ID_MODEL_FROM_DATABASE")" >> /tmp/debuglogs/usbdevices.log
	    echo "Vendor    : "$ID_VENDOR" ("$ID_VENDOR_FROM_DATABASE")" >> /tmp/debuglogs/usbdevices.log
	    echo "-------------------------------------------------------------" >> /tmp/debuglogs/usbdevices.log
	done

	cs_echo ""
	cs_echo "Blanking wifi passwords..."
	cs_echo ""
	sed -i 's/WIFI_PSK=.*/WIFI_PSK=xxxxxxxxx/' /tmp/debuglogs/crankshaft_env.sh
	sed -i 's/HOTSPOT_PSK=.*/HOTSPOT_PSK=xxxxxxxxx/' /tmp/debuglogs/crankshaft_env.sh
	sed -i 's/wpa_passphrase=.*/wpa_passphrase=xxxxxxxxx/' /tmp/debuglogs/hostapd.conf
	sed -i 's/psk=.*/psk=xxxxxxxxx/' /tmp/debuglogs/wpa_supplicant.conf

	sudo systemctl daemon-reload
	sudo systemctl list-units --type=service --no-pager --all | grep 'Crankshaft\|UNIT' | awk {'print $1'} | grep -e '.service' -e '.target' > /tmp/tmp.log
	while read -r line; do
	    sudo systemctl status $line >> /tmp/debuglogs/services-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-cs-status.log
	    echo "####################################################################################################" >> /tmp/debuglogs/services-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-cs-status.log
	done < /tmp/tmp.log
	rm /tmp/tmp.log

	sudo systemctl list-units --type=service --no-pager --all | grep -v 'Crankshaft\|UNIT' | awk {'print $1'} | grep -e '.service' -e '.target' > /tmp/tmp.log
	while read -r line; do
	    sudo systemctl status $line >> /tmp/debuglogs/services-non-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-non-cs-status.log
	    echo "####################################################################################################" >> /tmp/debuglogs/services-non-cs-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-non-cs-status.log
	done < /tmp/tmp.log
	rm /tmp/tmp.log

	sudo systemctl list-units --state=failed --no-pager --all | grep -e '.service' -e '.target' | awk {'print $2'} > /tmp/tmp.log
	while read -r line; do
	    sudo systemctl status $line >> /tmp/debuglogs/services-failed-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-failed-status.log
	    echo "####################################################################################################" >> /tmp/debuglogs/services-failed-status.log
	    echo "----------------------------------------------------------------------------------------------------" >> /tmp/debuglogs/services-failed-status.log
	done < /tmp/tmp.log
	rm /tmp/tmp.log

	# Finish
	sudo chmod 666 /tmp/debuglogs/*
	sudo rm -rf /boot/crankshaft/debug.zip >/dev/null 2>&1
	sudo zip -j /boot/crankshaft/debug.zip /tmp/debuglogs/* >/dev/null 2>&1
	cs_bootro
    fi

    #version
    if [ $1 == "version" ]; then
	echo "Crankshaft Management Tool v$version"
    fi
    cs_echo ""
    cs_echo "Done."
else
    echo ""
    echo "crankshaft known commands:"
    echo "----------------------------"
    echo ""
    echo "display                       Handle Display"
    echo "      |- on                   - Enable Display"
    echo "      |- off                  - Disable Display"
    echo "      |- autodetect           - Try to detect display by usb touch controller and setup"
    echo "                                (this feature is not ready for use - only prepared for further versions!)"
    echo ""
    echo "brightness                    Handle Display Backlight"
    echo "         |- min               - Set Display Brightness To Min"
    echo "         |- max               - Set Display Brightness To Max"
    echo "         |- up                - Increase Brightness"
    echo "         |- down              - Decrease Brightness"
    echo "         |- save              - Save Brightness Level"
    echo "         |- restore           - Restore Brightness Level"
    echo "         |- set x             - Set Display Brightness to x"
    echo "         |- get"
    echo "              |- level        - Get Current Brightness Level"
    echo "              |- location     - Get Device Brightness File Location"
    echo ""
    echo "filesystem                    Handle Filesystem"
    echo "         |- boot"
    echo "               |- lock        - Re-Mount /boot As Read Only"
    echo "               |- unlock      - Re-Mount /boot As Read Write"
    echo "         |- system"
    echo "                 |- lock      - Re-Mount / As Read Only"
    echo "                 |- unlock    - Re-Mount / As Read Write"
    echo ""
    echo "timers                        Handle Timers"
    echo "     |- status                - List Current Timers"
    echo "     |- start                 - Start All Timers"
    echo "     |- stop                  - Stop All Timers"
    echo "     |- disconnect"
    echo "                 |- start     - Start Timer Disconnect"
    echo "                 |- stop      - Stop Timer Disconnect"
    echo "                 |- set xx    - Set Disconnect Timeout"
    echo "     |- shutdown"
    echo "               |- start       - Start Timer Shutdown"
    echo "               |- stop        - Stop Timer Shutdown"
    echo "               |- set xx      - Set Shutdown Timeout"
    echo "     |- daynight xx xx        - Start hour for day and start hour for night (used to switch gui to day/night)"
    echo ""
    echo "audio                         Handle Audio Output"
    echo "    |- rpi                    - Enable default rpi audio"
    echo "    |- hifiberry"
    echo "               |- dac         - Hifiberry DAC RPi 1 / DAC+ Light / DAC Zero / MiniAmp"
    echo "               |- dacplus     - Hifiberry DAC+ Standard / Pro / Plus"
    echo "               |- digi        - Hifiberry DIGI / DIGI+"
    echo "               |- amp         - Hifiberry AMP+ (Not AMP2!)"
    echo "    |- audioinjector"
    echo "                   |- zero    - AudioInjector DAC Zero"
    echo "                   |- stereo  - AudioInjector DAC Stereo"
    echo "    |- allo"
    echo "          |- boss             - Allo Boss DAC"
    echo "          |- piano            - Allo Piano DAC"
    echo "    |- volume"
    echo "            |- set x          - Set audio volume to x % (0-100)"
    echo "            |- get            - Get current audio volume in %"
    echo "            |- up             - Increase audio volume by 5%"
    echo "            |- down           - Decrease audio volume by 5%"
    echo "            |- save           - Save current audio volume"
    echo "            |- restore        - Restore saved audio volume"
    echo ""
    echo "settings                      Handle Openauto Settings"
    echo "       |- save                - Save Openauto.ini"
    echo "       |- retore              - Restore Openauto.ini"
    echo ""
    echo "services                      Handle Systemd Services"
    echo "       |- reset               - Re-Init Default Boot State Of Services"
    echo "       |- status              - List State Of Crankshaft Services"
    echo "       |- failed              - List failed services"
    echo ""
    echo "rtc                           Handle Real Time Clock"
    echo "  |- abx80x"
    echo "  |- ds1307"
    echo "  |- ds1339"
    echo "  |- mcp7940x"
    echo "  |- mcp7941x"
    echo "  |- ds3231                   - Type of RTC" 
    echo "  |- pcf2127"
    echo "  |- pcf8523"
    echo "  |- pcf8563"
    echo "  |- sync                     - Sync timeserver to system time to rtc"
    echo "  |- status                   - Show current status of clock's"
    echo "  |- disable"
    echo ""
    echo "reset                         Handle Resets"
    echo "    |- config.txt             - Reset config.txt to defaults - Danger!!!"
    echo "                                Custom settings will be dropped but script tries"
    echo "                                to safe custom display and power settings:"
    echo "                                - hdmi_group="
    echo "                                - hdmi_mode="
    echo "                                - hdmi_cvt="
    echo "                                - hdmi_drive="
    echo "                                - hdmi_force_hotplug="
    echo "                                - config_hdmi_boost="
    echo "                                - current_limit_override="
    echo "                                - max_usb_current="
    echo "                                - avoid_warnings="
    echo ""
    echo "rpicam                        Handle Updates"
    echo "     |- enable                - Enable rpi camera module"
    echo "     |- disable               - Disable rpi camera module"
    echo ""
    echo "resize                        Resize root partition and filesystem on sdcard"
    echo ""
    echo "usb                           Handle USB drives"
    echo "  |- list                     - List available usb mass storage drives"
    echo "  |- mount x                  - Mount 1st partition from given device (sda,sdb,sdc,...)"
    echo "  |- umount                   - Unmount mounted usb drive"
    echo "  |- identify                 - Give us id's, manufacturer & model of connected usb devices"
    echo ""
    echo "gpio                          GPIO relted stuff"
    echo "  |- status                   - List current state of cs related gpio pins"
    echo "  |- all                      - List current state of all gpio pins"
    echo "  |- help                     - Show infos about the system / pin layout"
    echo ""
    echo "hotspot                       Hotspot related stuff"
    echo "  |- status                   - List connected clients"
    echo ""
    echo "syslog                        Show os syslog"
    echo ""
    echo "update                        Handle Updates"
    echo "     |- udev                  - Check And Update udev Rules For Device Detection"
    echo "     |- csmt                  - Check And Update Crankshaft Management Tool"
    echo ""
    echo "debuglog                      Create debug log for support requests"
    echo ""
    echo "version                       Show Vesion Of CSMT"
fi

exit 0
